/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { ConfigModal, ConversationHeaderModal, EventMessageModal, FeedItem, JobMessageModal, MessengerDataModal, MessengerEvents, MsgDataModal, NewMessageInputModal } from "./shared/messenger-interface";
import { CardDropDownDataModal, commonDropdownModal, DropDownDataModal, DropDownModal, DropdownPosition, EventModal, FavoriteDropdownModal, FavoriteItemModal, Fieldprops, FooterDataModal, IconListDataModel, IconListItemDataModel, KpiTileData, mainLinkModal, Message, MessageJob, SelectDropDownDataModal, ShoppingCartModel, Step, UserDropDownModal, UserInfoModal } from "./shared/interface";
import { CbMapMenu } from "./components/navigation/model/navigation";
import { CbMapMenu as CbMapMenu1 } from "./components/navigation/model";
export namespace Components {
    interface CutHistoryMsg {
        "currentUserId": string;
        "msg": JobMessageModal | EventMessageModal | MsgDataModal;
    }
    interface CutMessageHeader {
        "actions": DropDownModal[];
        "config": ConfigModal;
        "header": ConversationHeaderModal;
    }
    interface CutMessageHistory {
        "conversationLoader": boolean;
        "currentEvent": MessengerEvents;
        "currentUserId": string;
        "msgs": MsgDataModal[];
        "newMsgLoader": boolean;
    }
    interface CutMessageItem {
        "currentUserId": String;
        "isSelected": Boolean;
        "item": FeedItem;
    }
    interface CutMessageNew {
        "config": ConfigModal;
        "inputData": NewMessageInputModal;
    }
    interface CutWcAutoComplete {
        "disabled": boolean;
        "dropDownData": SelectDropDownDataModal[];
        "error": boolean;
        "guideline": string;
        "icon": boolean;
        "iconName": string;
        "label": string;
        "name": string;
        "success": boolean;
        "value": string;
    }
    interface CutWcButton {
        /**
          * Describe the accent button type
         */
        "accent": boolean;
        /**
          * Gives you the option to disabled the button
         */
        "disabled": boolean;
        /**
          * Describe the ghost button type
         */
        "ghost": boolean;
        /**
          * Describe the Ghost type
         */
        "positive": boolean;
        /**
          * Describe the primary button type
         */
        "primary": boolean;
        /**
          * Gives the option to change the size of button.
         */
        "size": "medium" | "large" | "small";
        /**
          * Describe the tertiary button type
         */
        "tertiary": boolean;
        /**
          * Describe the type of button. e.g. Submit
         */
        "type": string;
        /**
          * Describe the accent button type
         */
        "warn": boolean;
    }
    interface CutWcCard {
        "actionButtons": boolean;
        "cardId": any;
        "ctaText": string;
        "dropdownData": CardDropDownDataModal[];
        "heading": string;
        "imageCaption": string;
        "imageOnTop": boolean;
        "imageUrl": any;
        "onlyImage": boolean;
        "secondaCtaText": string;
        "subheading": string;
    }
    interface CutWcCardDropdown {
        "dropdownData": CardDropDownDataModal[];
        "dropdownId": string;
        "icon": string;
    }
    interface CutWcCheckbox {
        "accent": boolean;
        "checked": boolean;
        "disabled": boolean;
        "guideline": string;
        "name": string;
        "primary": boolean;
        "warn": boolean;
    }
    interface CutWcCircleButton {
        "accent": boolean;
        "big": boolean;
        "icon": string;
        "primary": boolean;
    }
    interface CutWcCommonDropdown {
        "dropDownData": DropDownModal[];
        "dropdownShowFrom": DropdownPosition;
        "hideBottomLine": boolean;
        "highlightSelected": boolean;
        "highlightTopLabel": boolean;
        "icon": string;
        "showicon": boolean;
        "toplabel": string;
    }
    interface CutWcCopyright {
        "copyRight": string;
    }
    interface CutWcCustomDropdown {
        "dropdownShowFrom": DropdownPosition;
        "hideBottomLine": boolean;
        "origin": string;
    }
    interface CutWcDropdown {
        "dropdownData": DropDownDataModal;
        "highlightBasedOnId": boolean;
        "selectedNav": string;
    }
    interface CutWcEditor {
        "editorId": string;
        "html": string;
        "inline": boolean;
        "menubar": boolean;
        "plugins": string[];
        "powerpaste_html_import": string;
        "powerpaste_word_import": string;
        "toolbar": string[];
        "valid_elements": string;
        "valid_styles": any;
    }
    interface CutWcEmoji {
        "labelColor": string;
        "labelFontSize": string;
    }
    interface CutWcFavoriteDropdown {
        "count": string;
        "favoriteItems": FavoriteItemModal[];
        "heading": string;
        "mainLink": mainLinkModal;
    }
    interface CutWcFavouriteListItem {
        "favouriteData": FavoriteItemModal;
    }
    interface CutWcHeader {
        "IconListDropdown": IconListDataModel[];
        "commonDropdown": commonDropdownModal[];
        "favoriteDropdown": FavoriteDropdownModal;
        "headerImagePath": string;
        "navigation": DropDownDataModal;
        "noDropShadow": boolean;
        "shoppingCart": ShoppingCartModel;
        "userDropDown": UserDropDownModal[];
        "userInfo": UserInfoModal;
    }
    interface CutWcHeaderListItem {
        "data": IconListItemDataModel;
    }
    interface CutWcHint {
        "bottom": boolean;
        "closeHint": () => Promise<void>;
        "heading": string;
        "icon": string;
        "left": boolean;
        "open": boolean;
        "openHint": () => Promise<void>;
        "right": boolean;
        "top": boolean;
    }
    interface CutWcIcon {
        "icon": string;
    }
    interface CutWcIconDropdown {
        "count": string;
        "heading": string;
        "icon": string;
        "items": IconListItemDataModel[];
        "mainLink": mainLinkModal;
        "mainLinkLabel": string;
        "origin": string;
        "topLabelColor": string;
        "topLabelSize": string;
    }
    interface CutWcInfoCard {
        "address": string;
        "cardId": string;
        "dropdownData": CardDropDownDataModal[];
        "firstPillText": string;
        "highlightText": string;
        "icon": string;
        "positionName": string;
        "positionTitle": string;
        "secondPillText": string;
        "secondaryText": string;
        "showPills": boolean;
        "small": boolean;
    }
    interface CutWcInput {
        "disabled": boolean;
        "error": boolean;
        "guideline": string;
        "icon": string;
        "label": string;
        "name": string;
        "readonly": boolean;
        "require": boolean;
        "success": boolean;
        "type": string;
        "value": string;
    }
    interface CutWcKpiTile {
        "data": KpiTileData;
    }
    interface CutWcLink {
        "disabled": boolean;
        "href": string;
        "icon": string;
        "small": boolean;
        "target": string;
    }
    interface CutWcLoader {
        "classes": Array<string>;
        "count": number;
        "styleOverrides": { [k: string]: any };
    }
    interface CutWcLogoCb {
        "imagePath": string;
        "tagLine": string;
    }
    interface CutWcMessage {
        "job": any;
        "message": Message;
        "templates": SelectDropDownDataModal[];
    }
    interface CutWcMessageCenter {
        "actions": DropDownModal[];
        "config": ConfigModal;
        "conversationLoader": boolean;
        "currentEvent": MessengerEvents;
        "currentUserId": string;
        "header": ConversationHeaderModal;
        "inputData": NewMessageInputModal;
        "msgs": JobMessageModal[] | EventMessageModal[] | MsgDataModal[];
        "newMsgLoader": boolean;
        "selectedId": string;
    }
    interface CutWcMessageEmpty {
        "noDataMsg": string;
        "noWrapper": boolean;
    }
    interface CutWcMessageFeed {
        "currentUserId": String;
        "feedItems": FeedItem[];
        "filterData": DropDownModal[];
        "noDataMsg": string;
        "selectedId": string;
        "showFeedLoader": boolean;
        "showScrollLoader": boolean;
    }
    interface CutWcMessageJob {
        "fromMessageCenter": boolean;
        "job": MessageJob;
        "message": string;
    }
    interface CutWcMessenger {
        "messengerData": MessengerDataModal;
    }
    interface CutWcNavigation {
        "bentoMap": CbMapMenu;
        "betaHeaderImagePath": string;
        "hasLogoutEvent": boolean;
        "headerImagePath": string;
        "isBeta": boolean;
        "navigationMap": CbMapMenu;
        "noDropShadow": boolean;
        "shoppingCart": ShoppingCartModel;
        "userMap": CbMapMenu;
    }
    interface CutWcNavigationCommonDropdown {
        "icon": string;
        "menu": CbMapMenu;
        "showicon": boolean;
        "toplabel": string;
    }
    interface CutWcNavigationDropdown {
        "mainMenu": CbMapMenu;
    }
    interface CutWcNavigationUserDropdown {
        "hasLogoutEvent": boolean;
        "isBeta": boolean;
        "userMap": CbMapMenu;
    }
    interface CutWcNotification {
        "error": boolean;
        "hide": () => Promise<void>;
        "info": boolean;
        "open": boolean;
        "show": () => Promise<void>;
        "success": boolean;
        "warn": boolean;
    }
    interface CutWcPill {
        "disabled": boolean;
        "gray": boolean;
        "icon": boolean;
        "iconName": string;
        "interactive": boolean;
        "name": string;
        "primary": boolean;
        "selected": boolean;
        "value": string;
    }
    interface CutWcPopup {
        "left": string;
        "noshadow": boolean;
        "open": boolean;
        "top": string;
        "width": string;
        "zindex": string;
    }
    interface CutWcProductFooter {
        "footerData": FooterDataModal;
        "hideCopyright": boolean;
    }
    interface CutWcProgressBar {
        "heading": string;
        "onlyBar": boolean;
        "percentage": string;
        "primary": boolean;
        "warn": boolean;
    }
    interface CutWcRadio {
        "accent": boolean;
        "checked": boolean;
        "disabled": boolean;
        "guideline": string;
        "name": string;
        "primary": boolean;
        "value": string;
        "warn": boolean;
    }
    interface CutWcRadioGroup {
        "guideline": string;
        "name": string;
    }
    interface CutWcRating {
        "hideLabel": boolean;
        "match": "good" | "great" | "close";
    }
    interface CutWcSelect {
        "disabled": boolean;
        "displayValue": string;
        "dropDownData": SelectDropDownDataModal[];
        "enableAutoComplete": boolean;
        "error": boolean;
        "guideline": string;
        "icon": string;
        "label": string;
        "multiple": boolean;
        "name": string;
        "require": boolean;
        "success": boolean;
    }
    interface CutWcShoppingCart {
        "shoppingCart": ShoppingCartModel;
    }
    interface CutWcStepper {
        "emitEvent": boolean;
        "nonLinear": boolean;
        "steps": Step[];
        "vertical": boolean;
    }
    interface CutWcTab {
        "label": string;
        "uid": string;
    }
    interface CutWcTabs {
        "maxTab": string;
        "selected": string;
        "selectedTab": string;
    }
    interface CutWcTag {
        "accent": boolean;
        "close": boolean;
        "primary": boolean;
        "warn": boolean;
    }
    interface CutWcTextArea {
        "disabled": boolean;
        "error": boolean;
        "guideline": string;
        "label": string;
        "maxLength": string;
        "name": string;
        "require": boolean;
        "success": boolean;
        "value": string;
    }
    interface CutWcTimePicker {
        "guideline": string;
        "open": boolean;
        "popupleft": string;
        "popupnoshadow": boolean;
        "popuptop": string;
        "popupwidth": string;
        "popupzindex": string;
        "time": string;
    }
    interface CutWcTimePickerClock {
        "ampm": string;
        "currentTimePart": "hours" | "minutes";
        "open": string;
        "time": string;
    }
    interface CutWcToggle {
        "accent": boolean;
        "checked": boolean;
        "disabled": boolean;
        "guideline": string;
        "name": string;
        "primary": boolean;
        "small": boolean;
        "warn": boolean;
    }
    interface CutWcTooltip {
        "bottom": boolean;
        "icon": string;
        "left": boolean;
        "right": boolean;
        "top": boolean;
    }
    interface CutWcUserDropdown {
        "userDropDownData": UserDropDownModal[];
        "userInfoData": UserInfoModal;
    }
    interface CutWcWebFooter {
        "footerData": FooterDataModal;
        "hideCopyright": boolean;
    }
    interface MyComponent {
    }
    interface NavTesting {
    }
}
declare global {
    interface HTMLCutHistoryMsgElement extends Components.CutHistoryMsg, HTMLStencilElement {
    }
    var HTMLCutHistoryMsgElement: {
        prototype: HTMLCutHistoryMsgElement;
        new (): HTMLCutHistoryMsgElement;
    };
    interface HTMLCutMessageHeaderElement extends Components.CutMessageHeader, HTMLStencilElement {
    }
    var HTMLCutMessageHeaderElement: {
        prototype: HTMLCutMessageHeaderElement;
        new (): HTMLCutMessageHeaderElement;
    };
    interface HTMLCutMessageHistoryElement extends Components.CutMessageHistory, HTMLStencilElement {
    }
    var HTMLCutMessageHistoryElement: {
        prototype: HTMLCutMessageHistoryElement;
        new (): HTMLCutMessageHistoryElement;
    };
    interface HTMLCutMessageItemElement extends Components.CutMessageItem, HTMLStencilElement {
    }
    var HTMLCutMessageItemElement: {
        prototype: HTMLCutMessageItemElement;
        new (): HTMLCutMessageItemElement;
    };
    interface HTMLCutMessageNewElement extends Components.CutMessageNew, HTMLStencilElement {
    }
    var HTMLCutMessageNewElement: {
        prototype: HTMLCutMessageNewElement;
        new (): HTMLCutMessageNewElement;
    };
    interface HTMLCutWcAutoCompleteElement extends Components.CutWcAutoComplete, HTMLStencilElement {
    }
    var HTMLCutWcAutoCompleteElement: {
        prototype: HTMLCutWcAutoCompleteElement;
        new (): HTMLCutWcAutoCompleteElement;
    };
    interface HTMLCutWcButtonElement extends Components.CutWcButton, HTMLStencilElement {
    }
    var HTMLCutWcButtonElement: {
        prototype: HTMLCutWcButtonElement;
        new (): HTMLCutWcButtonElement;
    };
    interface HTMLCutWcCardElement extends Components.CutWcCard, HTMLStencilElement {
    }
    var HTMLCutWcCardElement: {
        prototype: HTMLCutWcCardElement;
        new (): HTMLCutWcCardElement;
    };
    interface HTMLCutWcCardDropdownElement extends Components.CutWcCardDropdown, HTMLStencilElement {
    }
    var HTMLCutWcCardDropdownElement: {
        prototype: HTMLCutWcCardDropdownElement;
        new (): HTMLCutWcCardDropdownElement;
    };
    interface HTMLCutWcCheckboxElement extends Components.CutWcCheckbox, HTMLStencilElement {
    }
    var HTMLCutWcCheckboxElement: {
        prototype: HTMLCutWcCheckboxElement;
        new (): HTMLCutWcCheckboxElement;
    };
    interface HTMLCutWcCircleButtonElement extends Components.CutWcCircleButton, HTMLStencilElement {
    }
    var HTMLCutWcCircleButtonElement: {
        prototype: HTMLCutWcCircleButtonElement;
        new (): HTMLCutWcCircleButtonElement;
    };
    interface HTMLCutWcCommonDropdownElement extends Components.CutWcCommonDropdown, HTMLStencilElement {
    }
    var HTMLCutWcCommonDropdownElement: {
        prototype: HTMLCutWcCommonDropdownElement;
        new (): HTMLCutWcCommonDropdownElement;
    };
    interface HTMLCutWcCopyrightElement extends Components.CutWcCopyright, HTMLStencilElement {
    }
    var HTMLCutWcCopyrightElement: {
        prototype: HTMLCutWcCopyrightElement;
        new (): HTMLCutWcCopyrightElement;
    };
    interface HTMLCutWcCustomDropdownElement extends Components.CutWcCustomDropdown, HTMLStencilElement {
    }
    var HTMLCutWcCustomDropdownElement: {
        prototype: HTMLCutWcCustomDropdownElement;
        new (): HTMLCutWcCustomDropdownElement;
    };
    interface HTMLCutWcDropdownElement extends Components.CutWcDropdown, HTMLStencilElement {
    }
    var HTMLCutWcDropdownElement: {
        prototype: HTMLCutWcDropdownElement;
        new (): HTMLCutWcDropdownElement;
    };
    interface HTMLCutWcEditorElement extends Components.CutWcEditor, HTMLStencilElement {
    }
    var HTMLCutWcEditorElement: {
        prototype: HTMLCutWcEditorElement;
        new (): HTMLCutWcEditorElement;
    };
    interface HTMLCutWcEmojiElement extends Components.CutWcEmoji, HTMLStencilElement {
    }
    var HTMLCutWcEmojiElement: {
        prototype: HTMLCutWcEmojiElement;
        new (): HTMLCutWcEmojiElement;
    };
    interface HTMLCutWcFavoriteDropdownElement extends Components.CutWcFavoriteDropdown, HTMLStencilElement {
    }
    var HTMLCutWcFavoriteDropdownElement: {
        prototype: HTMLCutWcFavoriteDropdownElement;
        new (): HTMLCutWcFavoriteDropdownElement;
    };
    interface HTMLCutWcFavouriteListItemElement extends Components.CutWcFavouriteListItem, HTMLStencilElement {
    }
    var HTMLCutWcFavouriteListItemElement: {
        prototype: HTMLCutWcFavouriteListItemElement;
        new (): HTMLCutWcFavouriteListItemElement;
    };
    interface HTMLCutWcHeaderElement extends Components.CutWcHeader, HTMLStencilElement {
    }
    var HTMLCutWcHeaderElement: {
        prototype: HTMLCutWcHeaderElement;
        new (): HTMLCutWcHeaderElement;
    };
    interface HTMLCutWcHeaderListItemElement extends Components.CutWcHeaderListItem, HTMLStencilElement {
    }
    var HTMLCutWcHeaderListItemElement: {
        prototype: HTMLCutWcHeaderListItemElement;
        new (): HTMLCutWcHeaderListItemElement;
    };
    interface HTMLCutWcHintElement extends Components.CutWcHint, HTMLStencilElement {
    }
    var HTMLCutWcHintElement: {
        prototype: HTMLCutWcHintElement;
        new (): HTMLCutWcHintElement;
    };
    interface HTMLCutWcIconElement extends Components.CutWcIcon, HTMLStencilElement {
    }
    var HTMLCutWcIconElement: {
        prototype: HTMLCutWcIconElement;
        new (): HTMLCutWcIconElement;
    };
    interface HTMLCutWcIconDropdownElement extends Components.CutWcIconDropdown, HTMLStencilElement {
    }
    var HTMLCutWcIconDropdownElement: {
        prototype: HTMLCutWcIconDropdownElement;
        new (): HTMLCutWcIconDropdownElement;
    };
    interface HTMLCutWcInfoCardElement extends Components.CutWcInfoCard, HTMLStencilElement {
    }
    var HTMLCutWcInfoCardElement: {
        prototype: HTMLCutWcInfoCardElement;
        new (): HTMLCutWcInfoCardElement;
    };
    interface HTMLCutWcInputElement extends Components.CutWcInput, HTMLStencilElement {
    }
    var HTMLCutWcInputElement: {
        prototype: HTMLCutWcInputElement;
        new (): HTMLCutWcInputElement;
    };
    interface HTMLCutWcKpiTileElement extends Components.CutWcKpiTile, HTMLStencilElement {
    }
    var HTMLCutWcKpiTileElement: {
        prototype: HTMLCutWcKpiTileElement;
        new (): HTMLCutWcKpiTileElement;
    };
    interface HTMLCutWcLinkElement extends Components.CutWcLink, HTMLStencilElement {
    }
    var HTMLCutWcLinkElement: {
        prototype: HTMLCutWcLinkElement;
        new (): HTMLCutWcLinkElement;
    };
    interface HTMLCutWcLoaderElement extends Components.CutWcLoader, HTMLStencilElement {
    }
    var HTMLCutWcLoaderElement: {
        prototype: HTMLCutWcLoaderElement;
        new (): HTMLCutWcLoaderElement;
    };
    interface HTMLCutWcLogoCbElement extends Components.CutWcLogoCb, HTMLStencilElement {
    }
    var HTMLCutWcLogoCbElement: {
        prototype: HTMLCutWcLogoCbElement;
        new (): HTMLCutWcLogoCbElement;
    };
    interface HTMLCutWcMessageElement extends Components.CutWcMessage, HTMLStencilElement {
    }
    var HTMLCutWcMessageElement: {
        prototype: HTMLCutWcMessageElement;
        new (): HTMLCutWcMessageElement;
    };
    interface HTMLCutWcMessageCenterElement extends Components.CutWcMessageCenter, HTMLStencilElement {
    }
    var HTMLCutWcMessageCenterElement: {
        prototype: HTMLCutWcMessageCenterElement;
        new (): HTMLCutWcMessageCenterElement;
    };
    interface HTMLCutWcMessageEmptyElement extends Components.CutWcMessageEmpty, HTMLStencilElement {
    }
    var HTMLCutWcMessageEmptyElement: {
        prototype: HTMLCutWcMessageEmptyElement;
        new (): HTMLCutWcMessageEmptyElement;
    };
    interface HTMLCutWcMessageFeedElement extends Components.CutWcMessageFeed, HTMLStencilElement {
    }
    var HTMLCutWcMessageFeedElement: {
        prototype: HTMLCutWcMessageFeedElement;
        new (): HTMLCutWcMessageFeedElement;
    };
    interface HTMLCutWcMessageJobElement extends Components.CutWcMessageJob, HTMLStencilElement {
    }
    var HTMLCutWcMessageJobElement: {
        prototype: HTMLCutWcMessageJobElement;
        new (): HTMLCutWcMessageJobElement;
    };
    interface HTMLCutWcMessengerElement extends Components.CutWcMessenger, HTMLStencilElement {
    }
    var HTMLCutWcMessengerElement: {
        prototype: HTMLCutWcMessengerElement;
        new (): HTMLCutWcMessengerElement;
    };
    interface HTMLCutWcNavigationElement extends Components.CutWcNavigation, HTMLStencilElement {
    }
    var HTMLCutWcNavigationElement: {
        prototype: HTMLCutWcNavigationElement;
        new (): HTMLCutWcNavigationElement;
    };
    interface HTMLCutWcNavigationCommonDropdownElement extends Components.CutWcNavigationCommonDropdown, HTMLStencilElement {
    }
    var HTMLCutWcNavigationCommonDropdownElement: {
        prototype: HTMLCutWcNavigationCommonDropdownElement;
        new (): HTMLCutWcNavigationCommonDropdownElement;
    };
    interface HTMLCutWcNavigationDropdownElement extends Components.CutWcNavigationDropdown, HTMLStencilElement {
    }
    var HTMLCutWcNavigationDropdownElement: {
        prototype: HTMLCutWcNavigationDropdownElement;
        new (): HTMLCutWcNavigationDropdownElement;
    };
    interface HTMLCutWcNavigationUserDropdownElement extends Components.CutWcNavigationUserDropdown, HTMLStencilElement {
    }
    var HTMLCutWcNavigationUserDropdownElement: {
        prototype: HTMLCutWcNavigationUserDropdownElement;
        new (): HTMLCutWcNavigationUserDropdownElement;
    };
    interface HTMLCutWcNotificationElement extends Components.CutWcNotification, HTMLStencilElement {
    }
    var HTMLCutWcNotificationElement: {
        prototype: HTMLCutWcNotificationElement;
        new (): HTMLCutWcNotificationElement;
    };
    interface HTMLCutWcPillElement extends Components.CutWcPill, HTMLStencilElement {
    }
    var HTMLCutWcPillElement: {
        prototype: HTMLCutWcPillElement;
        new (): HTMLCutWcPillElement;
    };
    interface HTMLCutWcPopupElement extends Components.CutWcPopup, HTMLStencilElement {
    }
    var HTMLCutWcPopupElement: {
        prototype: HTMLCutWcPopupElement;
        new (): HTMLCutWcPopupElement;
    };
    interface HTMLCutWcProductFooterElement extends Components.CutWcProductFooter, HTMLStencilElement {
    }
    var HTMLCutWcProductFooterElement: {
        prototype: HTMLCutWcProductFooterElement;
        new (): HTMLCutWcProductFooterElement;
    };
    interface HTMLCutWcProgressBarElement extends Components.CutWcProgressBar, HTMLStencilElement {
    }
    var HTMLCutWcProgressBarElement: {
        prototype: HTMLCutWcProgressBarElement;
        new (): HTMLCutWcProgressBarElement;
    };
    interface HTMLCutWcRadioElement extends Components.CutWcRadio, HTMLStencilElement {
    }
    var HTMLCutWcRadioElement: {
        prototype: HTMLCutWcRadioElement;
        new (): HTMLCutWcRadioElement;
    };
    interface HTMLCutWcRadioGroupElement extends Components.CutWcRadioGroup, HTMLStencilElement {
    }
    var HTMLCutWcRadioGroupElement: {
        prototype: HTMLCutWcRadioGroupElement;
        new (): HTMLCutWcRadioGroupElement;
    };
    interface HTMLCutWcRatingElement extends Components.CutWcRating, HTMLStencilElement {
    }
    var HTMLCutWcRatingElement: {
        prototype: HTMLCutWcRatingElement;
        new (): HTMLCutWcRatingElement;
    };
    interface HTMLCutWcSelectElement extends Components.CutWcSelect, HTMLStencilElement {
    }
    var HTMLCutWcSelectElement: {
        prototype: HTMLCutWcSelectElement;
        new (): HTMLCutWcSelectElement;
    };
    interface HTMLCutWcShoppingCartElement extends Components.CutWcShoppingCart, HTMLStencilElement {
    }
    var HTMLCutWcShoppingCartElement: {
        prototype: HTMLCutWcShoppingCartElement;
        new (): HTMLCutWcShoppingCartElement;
    };
    interface HTMLCutWcStepperElement extends Components.CutWcStepper, HTMLStencilElement {
    }
    var HTMLCutWcStepperElement: {
        prototype: HTMLCutWcStepperElement;
        new (): HTMLCutWcStepperElement;
    };
    interface HTMLCutWcTabElement extends Components.CutWcTab, HTMLStencilElement {
    }
    var HTMLCutWcTabElement: {
        prototype: HTMLCutWcTabElement;
        new (): HTMLCutWcTabElement;
    };
    interface HTMLCutWcTabsElement extends Components.CutWcTabs, HTMLStencilElement {
    }
    var HTMLCutWcTabsElement: {
        prototype: HTMLCutWcTabsElement;
        new (): HTMLCutWcTabsElement;
    };
    interface HTMLCutWcTagElement extends Components.CutWcTag, HTMLStencilElement {
    }
    var HTMLCutWcTagElement: {
        prototype: HTMLCutWcTagElement;
        new (): HTMLCutWcTagElement;
    };
    interface HTMLCutWcTextAreaElement extends Components.CutWcTextArea, HTMLStencilElement {
    }
    var HTMLCutWcTextAreaElement: {
        prototype: HTMLCutWcTextAreaElement;
        new (): HTMLCutWcTextAreaElement;
    };
    interface HTMLCutWcTimePickerElement extends Components.CutWcTimePicker, HTMLStencilElement {
    }
    var HTMLCutWcTimePickerElement: {
        prototype: HTMLCutWcTimePickerElement;
        new (): HTMLCutWcTimePickerElement;
    };
    interface HTMLCutWcTimePickerClockElement extends Components.CutWcTimePickerClock, HTMLStencilElement {
    }
    var HTMLCutWcTimePickerClockElement: {
        prototype: HTMLCutWcTimePickerClockElement;
        new (): HTMLCutWcTimePickerClockElement;
    };
    interface HTMLCutWcToggleElement extends Components.CutWcToggle, HTMLStencilElement {
    }
    var HTMLCutWcToggleElement: {
        prototype: HTMLCutWcToggleElement;
        new (): HTMLCutWcToggleElement;
    };
    interface HTMLCutWcTooltipElement extends Components.CutWcTooltip, HTMLStencilElement {
    }
    var HTMLCutWcTooltipElement: {
        prototype: HTMLCutWcTooltipElement;
        new (): HTMLCutWcTooltipElement;
    };
    interface HTMLCutWcUserDropdownElement extends Components.CutWcUserDropdown, HTMLStencilElement {
    }
    var HTMLCutWcUserDropdownElement: {
        prototype: HTMLCutWcUserDropdownElement;
        new (): HTMLCutWcUserDropdownElement;
    };
    interface HTMLCutWcWebFooterElement extends Components.CutWcWebFooter, HTMLStencilElement {
    }
    var HTMLCutWcWebFooterElement: {
        prototype: HTMLCutWcWebFooterElement;
        new (): HTMLCutWcWebFooterElement;
    };
    interface HTMLMyComponentElement extends Components.MyComponent, HTMLStencilElement {
    }
    var HTMLMyComponentElement: {
        prototype: HTMLMyComponentElement;
        new (): HTMLMyComponentElement;
    };
    interface HTMLNavTestingElement extends Components.NavTesting, HTMLStencilElement {
    }
    var HTMLNavTestingElement: {
        prototype: HTMLNavTestingElement;
        new (): HTMLNavTestingElement;
    };
    interface HTMLElementTagNameMap {
        "cut-history-msg": HTMLCutHistoryMsgElement;
        "cut-message-header": HTMLCutMessageHeaderElement;
        "cut-message-history": HTMLCutMessageHistoryElement;
        "cut-message-item": HTMLCutMessageItemElement;
        "cut-message-new": HTMLCutMessageNewElement;
        "cut-wc-auto-complete": HTMLCutWcAutoCompleteElement;
        "cut-wc-button": HTMLCutWcButtonElement;
        "cut-wc-card": HTMLCutWcCardElement;
        "cut-wc-card-dropdown": HTMLCutWcCardDropdownElement;
        "cut-wc-checkbox": HTMLCutWcCheckboxElement;
        "cut-wc-circle-button": HTMLCutWcCircleButtonElement;
        "cut-wc-common-dropdown": HTMLCutWcCommonDropdownElement;
        "cut-wc-copyright": HTMLCutWcCopyrightElement;
        "cut-wc-custom-dropdown": HTMLCutWcCustomDropdownElement;
        "cut-wc-dropdown": HTMLCutWcDropdownElement;
        "cut-wc-editor": HTMLCutWcEditorElement;
        "cut-wc-emoji": HTMLCutWcEmojiElement;
        "cut-wc-favorite-dropdown": HTMLCutWcFavoriteDropdownElement;
        "cut-wc-favourite-list-item": HTMLCutWcFavouriteListItemElement;
        "cut-wc-header": HTMLCutWcHeaderElement;
        "cut-wc-header-list-item": HTMLCutWcHeaderListItemElement;
        "cut-wc-hint": HTMLCutWcHintElement;
        "cut-wc-icon": HTMLCutWcIconElement;
        "cut-wc-icon-dropdown": HTMLCutWcIconDropdownElement;
        "cut-wc-info-card": HTMLCutWcInfoCardElement;
        "cut-wc-input": HTMLCutWcInputElement;
        "cut-wc-kpi-tile": HTMLCutWcKpiTileElement;
        "cut-wc-link": HTMLCutWcLinkElement;
        "cut-wc-loader": HTMLCutWcLoaderElement;
        "cut-wc-logo-cb": HTMLCutWcLogoCbElement;
        "cut-wc-message": HTMLCutWcMessageElement;
        "cut-wc-message-center": HTMLCutWcMessageCenterElement;
        "cut-wc-message-empty": HTMLCutWcMessageEmptyElement;
        "cut-wc-message-feed": HTMLCutWcMessageFeedElement;
        "cut-wc-message-job": HTMLCutWcMessageJobElement;
        "cut-wc-messenger": HTMLCutWcMessengerElement;
        "cut-wc-navigation": HTMLCutWcNavigationElement;
        "cut-wc-navigation-common-dropdown": HTMLCutWcNavigationCommonDropdownElement;
        "cut-wc-navigation-dropdown": HTMLCutWcNavigationDropdownElement;
        "cut-wc-navigation-user-dropdown": HTMLCutWcNavigationUserDropdownElement;
        "cut-wc-notification": HTMLCutWcNotificationElement;
        "cut-wc-pill": HTMLCutWcPillElement;
        "cut-wc-popup": HTMLCutWcPopupElement;
        "cut-wc-product-footer": HTMLCutWcProductFooterElement;
        "cut-wc-progress-bar": HTMLCutWcProgressBarElement;
        "cut-wc-radio": HTMLCutWcRadioElement;
        "cut-wc-radio-group": HTMLCutWcRadioGroupElement;
        "cut-wc-rating": HTMLCutWcRatingElement;
        "cut-wc-select": HTMLCutWcSelectElement;
        "cut-wc-shopping-cart": HTMLCutWcShoppingCartElement;
        "cut-wc-stepper": HTMLCutWcStepperElement;
        "cut-wc-tab": HTMLCutWcTabElement;
        "cut-wc-tabs": HTMLCutWcTabsElement;
        "cut-wc-tag": HTMLCutWcTagElement;
        "cut-wc-text-area": HTMLCutWcTextAreaElement;
        "cut-wc-time-picker": HTMLCutWcTimePickerElement;
        "cut-wc-time-picker-clock": HTMLCutWcTimePickerClockElement;
        "cut-wc-toggle": HTMLCutWcToggleElement;
        "cut-wc-tooltip": HTMLCutWcTooltipElement;
        "cut-wc-user-dropdown": HTMLCutWcUserDropdownElement;
        "cut-wc-web-footer": HTMLCutWcWebFooterElement;
        "my-component": HTMLMyComponentElement;
        "nav-testing": HTMLNavTestingElement;
    }
}
declare namespace LocalJSX {
    interface CutHistoryMsg {
        "currentUserId"?: string;
        "msg"?: JobMessageModal | EventMessageModal | MsgDataModal;
    }
    interface CutMessageHeader {
        "actions"?: DropDownModal[];
        "config"?: ConfigModal;
        "header"?: ConversationHeaderModal;
        "onActionUpdate"?: (event: CustomEvent<DropDownModal>) => void;
        "onHeaderTitleClicked"?: (event: CustomEvent<boolean>) => void;
    }
    interface CutMessageHistory {
        "conversationLoader"?: boolean;
        "currentEvent"?: MessengerEvents;
        "currentUserId"?: string;
        "msgs"?: MsgDataModal[];
        "newMsgLoader"?: boolean;
        "onScrollUpEnded"?: (event: CustomEvent<boolean>) => void;
    }
    interface CutMessageItem {
        "currentUserId"?: String;
        "isSelected"?: Boolean;
        "item"?: FeedItem;
        "onFeedItemClicked"?: (event: CustomEvent<FeedItem>) => void;
    }
    interface CutMessageNew {
        "config"?: ConfigModal;
        "inputData"?: NewMessageInputModal;
        "onMsgSubmit"?: (event: CustomEvent<boolean>) => void;
    }
    interface CutWcAutoComplete {
        "disabled"?: boolean;
        "dropDownData"?: SelectDropDownDataModal[];
        "error"?: boolean;
        "guideline"?: string;
        "icon"?: boolean;
        "iconName"?: string;
        "label"?: string;
        "name"?: string;
        "success"?: boolean;
        "value"?: string;
    }
    interface CutWcButton {
        /**
          * Describe the accent button type
         */
        "accent"?: boolean;
        /**
          * Gives you the option to disabled the button
         */
        "disabled"?: boolean;
        /**
          * Describe the ghost button type
         */
        "ghost"?: boolean;
        /**
          * Describe the Ghost type
         */
        "positive"?: boolean;
        /**
          * Describe the primary button type
         */
        "primary"?: boolean;
        /**
          * Gives the option to change the size of button.
         */
        "size"?: "medium" | "large" | "small";
        /**
          * Describe the tertiary button type
         */
        "tertiary"?: boolean;
        /**
          * Describe the type of button. e.g. Submit
         */
        "type"?: string;
        /**
          * Describe the accent button type
         */
        "warn"?: boolean;
    }
    interface CutWcCard {
        "actionButtons"?: boolean;
        "cardId"?: any;
        "ctaText"?: string;
        "dropdownData"?: CardDropDownDataModal[];
        "heading"?: string;
        "imageCaption"?: string;
        "imageOnTop"?: boolean;
        "imageUrl"?: any;
        "onIsClicked"?: (event: CustomEvent<any>) => void;
        "onlyImage"?: boolean;
        "secondaCtaText"?: string;
        "subheading"?: string;
    }
    interface CutWcCardDropdown {
        "dropdownData"?: CardDropDownDataModal[];
        "dropdownId"?: string;
        "icon"?: string;
        "onClicked"?: (event: CustomEvent<any>) => void;
    }
    interface CutWcCheckbox {
        "accent"?: boolean;
        "checked"?: boolean;
        "disabled"?: boolean;
        "guideline"?: string;
        "name"?: string;
        "onInputUpdate"?: (event: CustomEvent<Fieldprops>) => void;
        "primary"?: boolean;
        "warn"?: boolean;
    }
    interface CutWcCircleButton {
        "accent"?: boolean;
        "big"?: boolean;
        "icon"?: string;
        "primary"?: boolean;
    }
    interface CutWcCommonDropdown {
        "dropDownData"?: DropDownModal[];
        "dropdownShowFrom"?: DropdownPosition;
        "hideBottomLine"?: boolean;
        "highlightSelected"?: boolean;
        "highlightTopLabel"?: boolean;
        "icon"?: string;
        "onClicked"?: (event: CustomEvent<any>) => void;
        "showicon"?: boolean;
        "toplabel"?: string;
    }
    interface CutWcCopyright {
        "copyRight"?: string;
    }
    interface CutWcCustomDropdown {
        "dropdownShowFrom"?: DropdownPosition;
        "hideBottomLine"?: boolean;
        "onDropdownClicked"?: (event: CustomEvent<EventModal>) => void;
        "origin"?: string;
    }
    interface CutWcDropdown {
        "dropdownData"?: DropDownDataModal;
        "highlightBasedOnId"?: boolean;
        "onClicked"?: (event: CustomEvent<any>) => void;
        "selectedNav"?: string;
    }
    interface CutWcEditor {
        "editorId"?: string;
        "html"?: string;
        "inline"?: boolean;
        "menubar"?: boolean;
        "onGetEditor"?: (event: CustomEvent<any>) => void;
        "onGetKeyInput"?: (event: CustomEvent<any>) => void;
        "onHtmlChange"?: (event: CustomEvent<any>) => void;
        "plugins"?: string[];
        "powerpaste_html_import"?: string;
        "powerpaste_word_import"?: string;
        "toolbar"?: string[];
        "valid_elements"?: string;
        "valid_styles"?: any;
    }
    interface CutWcEmoji {
        "labelColor"?: string;
        "labelFontSize"?: string;
        "onEmojiPicked"?: (event: CustomEvent<{
    emoji?: string;
  }>) => void;
    }
    interface CutWcFavoriteDropdown {
        "count"?: string;
        "favoriteItems"?: FavoriteItemModal[];
        "heading"?: string;
        "mainLink"?: mainLinkModal;
        "onClicked"?: (event: CustomEvent<mainLinkModal>) => void;
    }
    interface CutWcFavouriteListItem {
        "favouriteData"?: FavoriteItemModal;
        "onClicked"?: (event: CustomEvent<FavoriteItemModal>) => void;
    }
    interface CutWcHeader {
        "IconListDropdown"?: IconListDataModel[];
        "commonDropdown"?: commonDropdownModal[];
        "favoriteDropdown"?: FavoriteDropdownModal;
        "headerImagePath"?: string;
        "navigation"?: DropDownDataModal;
        "noDropShadow"?: boolean;
        "onClicked"?: (event: CustomEvent<EventModal>) => void;
        "shoppingCart"?: ShoppingCartModel;
        "userDropDown"?: UserDropDownModal[];
        "userInfo"?: UserInfoModal;
    }
    interface CutWcHeaderListItem {
        "data"?: IconListItemDataModel;
        "onClicked"?: (event: CustomEvent<IconListItemDataModel>) => void;
    }
    interface CutWcHint {
        "bottom"?: boolean;
        "heading"?: string;
        "icon"?: string;
        "left"?: boolean;
        "open"?: boolean;
        "right"?: boolean;
        "top"?: boolean;
    }
    interface CutWcIcon {
        "icon"?: string;
    }
    interface CutWcIconDropdown {
        "count"?: string;
        "heading"?: string;
        "icon"?: string;
        "items"?: IconListItemDataModel[];
        "mainLink"?: mainLinkModal;
        "mainLinkLabel"?: string;
        "onClicked"?: (event: CustomEvent<mainLinkModal>) => void;
        "origin"?: string;
        "topLabelColor"?: string;
        "topLabelSize"?: string;
    }
    interface CutWcInfoCard {
        "address"?: string;
        "cardId"?: string;
        "dropdownData"?: CardDropDownDataModal[];
        "firstPillText"?: string;
        "highlightText"?: string;
        "icon"?: string;
        "positionName"?: string;
        "positionTitle"?: string;
        "secondPillText"?: string;
        "secondaryText"?: string;
        "showPills"?: boolean;
        "small"?: boolean;
    }
    interface CutWcInput {
        "disabled"?: boolean;
        "error"?: boolean;
        "guideline"?: string;
        "icon"?: string;
        "label"?: string;
        "name"?: string;
        "onInputChange"?: (event: CustomEvent<Fieldprops>) => void;
        "onInputUpdate"?: (event: CustomEvent<Fieldprops>) => void;
        "onKeyDownChange"?: (event: CustomEvent<Fieldprops>) => void;
        "onKeyUpChange"?: (event: CustomEvent<Fieldprops>) => void;
        "readonly"?: boolean;
        "require"?: boolean;
        "success"?: boolean;
        "type"?: string;
        "value"?: string;
    }
    interface CutWcKpiTile {
        "data"?: KpiTileData;
    }
    interface CutWcLink {
        "disabled"?: boolean;
        "href"?: string;
        "icon"?: string;
        "small"?: boolean;
        "target"?: string;
    }
    interface CutWcLoader {
        "classes"?: Array<string>;
        "count"?: number;
        "styleOverrides"?: { [k: string]: any };
    }
    interface CutWcLogoCb {
        "imagePath"?: string;
        "tagLine"?: string;
    }
    interface CutWcMessage {
        "job"?: any;
        "message"?: Message;
        "onDeleteTemplate"?: (event: CustomEvent<EventModal>) => void;
        "onGetEditor"?: (event: CustomEvent<any>) => void;
        "onKeyUpChanges"?: (event: CustomEvent<Message>) => void;
        "onSaveTemplate"?: (event: CustomEvent<EventModal>) => void;
        "onTemplateSelected"?: (event: CustomEvent<EventModal>) => void;
        "onToggleSaveNewTemplate"?: (event: CustomEvent<boolean>) => void;
        "onValueChanges"?: (event: CustomEvent<Message>) => void;
        "templates"?: SelectDropDownDataModal[];
    }
    interface CutWcMessageCenter {
        "actions"?: DropDownModal[];
        "config"?: ConfigModal;
        "conversationLoader"?: boolean;
        "currentEvent"?: MessengerEvents;
        "currentUserId"?: string;
        "header"?: ConversationHeaderModal;
        "inputData"?: NewMessageInputModal;
        "msgs"?: JobMessageModal[] | EventMessageModal[] | MsgDataModal[];
        "newMsgLoader"?: boolean;
        "selectedId"?: string;
    }
    interface CutWcMessageEmpty {
        "noDataMsg"?: string;
        "noWrapper"?: boolean;
    }
    interface CutWcMessageFeed {
        "currentUserId"?: String;
        "feedItems"?: FeedItem[];
        "filterData"?: DropDownModal[];
        "noDataMsg"?: string;
        "onFilterChange"?: (event: CustomEvent<DropDownModal>) => void;
        "onScrollEnded"?: (event: CustomEvent<boolean>) => void;
        "selectedId"?: string;
        "showFeedLoader"?: boolean;
        "showScrollLoader"?: boolean;
    }
    interface CutWcMessageJob {
        "fromMessageCenter"?: boolean;
        "job"?: MessageJob;
        "message"?: string;
        "onClickApply"?: (event: CustomEvent<any>) => void;
        "onClickDetail"?: (event: CustomEvent<any>) => void;
    }
    interface CutWcMessenger {
        "messengerData"?: MessengerDataModal;
        "onMessengerUpdate"?: (event: CustomEvent<MessengerDataModal>) => void;
    }
    interface CutWcNavigation {
        "bentoMap"?: CbMapMenu;
        "betaHeaderImagePath"?: string;
        "hasLogoutEvent"?: boolean;
        "headerImagePath"?: string;
        "isBeta"?: boolean;
        "navigationMap"?: CbMapMenu;
        "noDropShadow"?: boolean;
        "shoppingCart"?: ShoppingCartModel;
        "userMap"?: CbMapMenu;
    }
    interface CutWcNavigationCommonDropdown {
        "icon"?: string;
        "menu"?: CbMapMenu;
        "showicon"?: boolean;
        "toplabel"?: string;
    }
    interface CutWcNavigationDropdown {
        "mainMenu"?: CbMapMenu;
        "onClicked"?: (event: CustomEvent<any>) => void;
    }
    interface CutWcNavigationUserDropdown {
        "hasLogoutEvent"?: boolean;
        "isBeta"?: boolean;
        "onClicked"?: (event: CustomEvent<any>) => void;
        "userMap"?: CbMapMenu;
    }
    interface CutWcNotification {
        "error"?: boolean;
        "info"?: boolean;
        "onClose"?: (event: CustomEvent<boolean>) => void;
        "open"?: boolean;
        "success"?: boolean;
        "warn"?: boolean;
    }
    interface CutWcPill {
        "disabled"?: boolean;
        "gray"?: boolean;
        "icon"?: boolean;
        "iconName"?: string;
        "interactive"?: boolean;
        "name"?: string;
        "onClicked"?: (event: CustomEvent<boolean>) => void;
        "primary"?: boolean;
        "selected"?: boolean;
        "value"?: string;
    }
    interface CutWcPopup {
        "left"?: string;
        "noshadow"?: boolean;
        "open"?: boolean;
        "top"?: string;
        "width"?: string;
        "zindex"?: string;
    }
    interface CutWcProductFooter {
        "footerData"?: FooterDataModal;
        "hideCopyright"?: boolean;
        "onClicked"?: (event: CustomEvent<any>) => void;
    }
    interface CutWcProgressBar {
        "heading"?: string;
        "onlyBar"?: boolean;
        "percentage"?: string;
        "primary"?: boolean;
        "warn"?: boolean;
    }
    interface CutWcRadio {
        "accent"?: boolean;
        "checked"?: boolean;
        "disabled"?: boolean;
        "guideline"?: string;
        "name"?: string;
        "onInputUpdate"?: (event: CustomEvent<Fieldprops>) => void;
        "primary"?: boolean;
        "value"?: string;
        "warn"?: boolean;
    }
    interface CutWcRadioGroup {
        "guideline"?: string;
        "name"?: string;
        "onRadioChange"?: (event: CustomEvent<Fieldprops>) => void;
    }
    interface CutWcRating {
        "hideLabel"?: boolean;
        "match"?: "good" | "great" | "close";
    }
    interface CutWcSelect {
        "disabled"?: boolean;
        "displayValue"?: string;
        "dropDownData"?: SelectDropDownDataModal[];
        "enableAutoComplete"?: boolean;
        "error"?: boolean;
        "guideline"?: string;
        "icon"?: string;
        "label"?: string;
        "multiple"?: boolean;
        "name"?: string;
        "onKeyUpChanges"?: (event: CustomEvent<string>) => void;
        "onSelectChange"?: (event: CustomEvent<Fieldprops>) => void;
        "require"?: boolean;
        "success"?: boolean;
    }
    interface CutWcShoppingCart {
        "onClicked"?: (event: CustomEvent<ShoppingCartModel>) => void;
        "shoppingCart"?: ShoppingCartModel;
    }
    interface CutWcStepper {
        "emitEvent"?: boolean;
        "nonLinear"?: boolean;
        "onClicked"?: (event: CustomEvent<Step>) => void;
        "steps"?: Step[];
        "vertical"?: boolean;
    }
    interface CutWcTab {
        "label"?: string;
        "onClicked"?: (event: CustomEvent<any>) => void;
        "uid"?: string;
    }
    interface CutWcTabs {
        "maxTab"?: string;
        "onClicked"?: (event: CustomEvent<any>) => void;
        "selected"?: string;
        "selectedTab"?: string;
    }
    interface CutWcTag {
        "accent"?: boolean;
        "close"?: boolean;
        "primary"?: boolean;
        "warn"?: boolean;
    }
    interface CutWcTextArea {
        "disabled"?: boolean;
        "error"?: boolean;
        "guideline"?: string;
        "label"?: string;
        "maxLength"?: string;
        "name"?: string;
        "onInputUpdate"?: (event: CustomEvent<Fieldprops>) => void;
        "onKeyDownChange"?: (event: CustomEvent<Fieldprops>) => void;
        "onKeyUpChange"?: (event: CustomEvent<Fieldprops>) => void;
        "require"?: boolean;
        "success"?: boolean;
        "value"?: string;
    }
    interface CutWcTimePicker {
        "guideline"?: string;
        "onTimeChanged"?: (event: CustomEvent<string>) => void;
        "open"?: boolean;
        "popupleft"?: string;
        "popupnoshadow"?: boolean;
        "popuptop"?: string;
        "popupwidth"?: string;
        "popupzindex"?: string;
        "time"?: string;
    }
    interface CutWcTimePickerClock {
        "ampm"?: string;
        "currentTimePart"?: "hours" | "minutes";
        "open"?: string;
        "time"?: string;
    }
    interface CutWcToggle {
        "accent"?: boolean;
        "checked"?: boolean;
        "disabled"?: boolean;
        "guideline"?: string;
        "name"?: string;
        "onInputUpdate"?: (event: CustomEvent<Fieldprops>) => void;
        "primary"?: boolean;
        "small"?: boolean;
        "warn"?: boolean;
    }
    interface CutWcTooltip {
        "bottom"?: boolean;
        "icon"?: string;
        "left"?: boolean;
        "right"?: boolean;
        "top"?: boolean;
    }
    interface CutWcUserDropdown {
        "onClicked"?: (event: CustomEvent<any>) => void;
        "userDropDownData"?: UserDropDownModal[];
        "userInfoData"?: UserInfoModal;
    }
    interface CutWcWebFooter {
        "footerData"?: FooterDataModal;
        "hideCopyright"?: boolean;
        "onClicked"?: (event: CustomEvent<any>) => void;
    }
    interface MyComponent {
    }
    interface NavTesting {
    }
    interface IntrinsicElements {
        "cut-history-msg": CutHistoryMsg;
        "cut-message-header": CutMessageHeader;
        "cut-message-history": CutMessageHistory;
        "cut-message-item": CutMessageItem;
        "cut-message-new": CutMessageNew;
        "cut-wc-auto-complete": CutWcAutoComplete;
        "cut-wc-button": CutWcButton;
        "cut-wc-card": CutWcCard;
        "cut-wc-card-dropdown": CutWcCardDropdown;
        "cut-wc-checkbox": CutWcCheckbox;
        "cut-wc-circle-button": CutWcCircleButton;
        "cut-wc-common-dropdown": CutWcCommonDropdown;
        "cut-wc-copyright": CutWcCopyright;
        "cut-wc-custom-dropdown": CutWcCustomDropdown;
        "cut-wc-dropdown": CutWcDropdown;
        "cut-wc-editor": CutWcEditor;
        "cut-wc-emoji": CutWcEmoji;
        "cut-wc-favorite-dropdown": CutWcFavoriteDropdown;
        "cut-wc-favourite-list-item": CutWcFavouriteListItem;
        "cut-wc-header": CutWcHeader;
        "cut-wc-header-list-item": CutWcHeaderListItem;
        "cut-wc-hint": CutWcHint;
        "cut-wc-icon": CutWcIcon;
        "cut-wc-icon-dropdown": CutWcIconDropdown;
        "cut-wc-info-card": CutWcInfoCard;
        "cut-wc-input": CutWcInput;
        "cut-wc-kpi-tile": CutWcKpiTile;
        "cut-wc-link": CutWcLink;
        "cut-wc-loader": CutWcLoader;
        "cut-wc-logo-cb": CutWcLogoCb;
        "cut-wc-message": CutWcMessage;
        "cut-wc-message-center": CutWcMessageCenter;
        "cut-wc-message-empty": CutWcMessageEmpty;
        "cut-wc-message-feed": CutWcMessageFeed;
        "cut-wc-message-job": CutWcMessageJob;
        "cut-wc-messenger": CutWcMessenger;
        "cut-wc-navigation": CutWcNavigation;
        "cut-wc-navigation-common-dropdown": CutWcNavigationCommonDropdown;
        "cut-wc-navigation-dropdown": CutWcNavigationDropdown;
        "cut-wc-navigation-user-dropdown": CutWcNavigationUserDropdown;
        "cut-wc-notification": CutWcNotification;
        "cut-wc-pill": CutWcPill;
        "cut-wc-popup": CutWcPopup;
        "cut-wc-product-footer": CutWcProductFooter;
        "cut-wc-progress-bar": CutWcProgressBar;
        "cut-wc-radio": CutWcRadio;
        "cut-wc-radio-group": CutWcRadioGroup;
        "cut-wc-rating": CutWcRating;
        "cut-wc-select": CutWcSelect;
        "cut-wc-shopping-cart": CutWcShoppingCart;
        "cut-wc-stepper": CutWcStepper;
        "cut-wc-tab": CutWcTab;
        "cut-wc-tabs": CutWcTabs;
        "cut-wc-tag": CutWcTag;
        "cut-wc-text-area": CutWcTextArea;
        "cut-wc-time-picker": CutWcTimePicker;
        "cut-wc-time-picker-clock": CutWcTimePickerClock;
        "cut-wc-toggle": CutWcToggle;
        "cut-wc-tooltip": CutWcTooltip;
        "cut-wc-user-dropdown": CutWcUserDropdown;
        "cut-wc-web-footer": CutWcWebFooter;
        "my-component": MyComponent;
        "nav-testing": NavTesting;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "cut-history-msg": LocalJSX.CutHistoryMsg & JSXBase.HTMLAttributes<HTMLCutHistoryMsgElement>;
            "cut-message-header": LocalJSX.CutMessageHeader & JSXBase.HTMLAttributes<HTMLCutMessageHeaderElement>;
            "cut-message-history": LocalJSX.CutMessageHistory & JSXBase.HTMLAttributes<HTMLCutMessageHistoryElement>;
            "cut-message-item": LocalJSX.CutMessageItem & JSXBase.HTMLAttributes<HTMLCutMessageItemElement>;
            "cut-message-new": LocalJSX.CutMessageNew & JSXBase.HTMLAttributes<HTMLCutMessageNewElement>;
            "cut-wc-auto-complete": LocalJSX.CutWcAutoComplete & JSXBase.HTMLAttributes<HTMLCutWcAutoCompleteElement>;
            "cut-wc-button": LocalJSX.CutWcButton & JSXBase.HTMLAttributes<HTMLCutWcButtonElement>;
            "cut-wc-card": LocalJSX.CutWcCard & JSXBase.HTMLAttributes<HTMLCutWcCardElement>;
            "cut-wc-card-dropdown": LocalJSX.CutWcCardDropdown & JSXBase.HTMLAttributes<HTMLCutWcCardDropdownElement>;
            "cut-wc-checkbox": LocalJSX.CutWcCheckbox & JSXBase.HTMLAttributes<HTMLCutWcCheckboxElement>;
            "cut-wc-circle-button": LocalJSX.CutWcCircleButton & JSXBase.HTMLAttributes<HTMLCutWcCircleButtonElement>;
            "cut-wc-common-dropdown": LocalJSX.CutWcCommonDropdown & JSXBase.HTMLAttributes<HTMLCutWcCommonDropdownElement>;
            "cut-wc-copyright": LocalJSX.CutWcCopyright & JSXBase.HTMLAttributes<HTMLCutWcCopyrightElement>;
            "cut-wc-custom-dropdown": LocalJSX.CutWcCustomDropdown & JSXBase.HTMLAttributes<HTMLCutWcCustomDropdownElement>;
            "cut-wc-dropdown": LocalJSX.CutWcDropdown & JSXBase.HTMLAttributes<HTMLCutWcDropdownElement>;
            "cut-wc-editor": LocalJSX.CutWcEditor & JSXBase.HTMLAttributes<HTMLCutWcEditorElement>;
            "cut-wc-emoji": LocalJSX.CutWcEmoji & JSXBase.HTMLAttributes<HTMLCutWcEmojiElement>;
            "cut-wc-favorite-dropdown": LocalJSX.CutWcFavoriteDropdown & JSXBase.HTMLAttributes<HTMLCutWcFavoriteDropdownElement>;
            "cut-wc-favourite-list-item": LocalJSX.CutWcFavouriteListItem & JSXBase.HTMLAttributes<HTMLCutWcFavouriteListItemElement>;
            "cut-wc-header": LocalJSX.CutWcHeader & JSXBase.HTMLAttributes<HTMLCutWcHeaderElement>;
            "cut-wc-header-list-item": LocalJSX.CutWcHeaderListItem & JSXBase.HTMLAttributes<HTMLCutWcHeaderListItemElement>;
            "cut-wc-hint": LocalJSX.CutWcHint & JSXBase.HTMLAttributes<HTMLCutWcHintElement>;
            "cut-wc-icon": LocalJSX.CutWcIcon & JSXBase.HTMLAttributes<HTMLCutWcIconElement>;
            "cut-wc-icon-dropdown": LocalJSX.CutWcIconDropdown & JSXBase.HTMLAttributes<HTMLCutWcIconDropdownElement>;
            "cut-wc-info-card": LocalJSX.CutWcInfoCard & JSXBase.HTMLAttributes<HTMLCutWcInfoCardElement>;
            "cut-wc-input": LocalJSX.CutWcInput & JSXBase.HTMLAttributes<HTMLCutWcInputElement>;
            "cut-wc-kpi-tile": LocalJSX.CutWcKpiTile & JSXBase.HTMLAttributes<HTMLCutWcKpiTileElement>;
            "cut-wc-link": LocalJSX.CutWcLink & JSXBase.HTMLAttributes<HTMLCutWcLinkElement>;
            "cut-wc-loader": LocalJSX.CutWcLoader & JSXBase.HTMLAttributes<HTMLCutWcLoaderElement>;
            "cut-wc-logo-cb": LocalJSX.CutWcLogoCb & JSXBase.HTMLAttributes<HTMLCutWcLogoCbElement>;
            "cut-wc-message": LocalJSX.CutWcMessage & JSXBase.HTMLAttributes<HTMLCutWcMessageElement>;
            "cut-wc-message-center": LocalJSX.CutWcMessageCenter & JSXBase.HTMLAttributes<HTMLCutWcMessageCenterElement>;
            "cut-wc-message-empty": LocalJSX.CutWcMessageEmpty & JSXBase.HTMLAttributes<HTMLCutWcMessageEmptyElement>;
            "cut-wc-message-feed": LocalJSX.CutWcMessageFeed & JSXBase.HTMLAttributes<HTMLCutWcMessageFeedElement>;
            "cut-wc-message-job": LocalJSX.CutWcMessageJob & JSXBase.HTMLAttributes<HTMLCutWcMessageJobElement>;
            "cut-wc-messenger": LocalJSX.CutWcMessenger & JSXBase.HTMLAttributes<HTMLCutWcMessengerElement>;
            "cut-wc-navigation": LocalJSX.CutWcNavigation & JSXBase.HTMLAttributes<HTMLCutWcNavigationElement>;
            "cut-wc-navigation-common-dropdown": LocalJSX.CutWcNavigationCommonDropdown & JSXBase.HTMLAttributes<HTMLCutWcNavigationCommonDropdownElement>;
            "cut-wc-navigation-dropdown": LocalJSX.CutWcNavigationDropdown & JSXBase.HTMLAttributes<HTMLCutWcNavigationDropdownElement>;
            "cut-wc-navigation-user-dropdown": LocalJSX.CutWcNavigationUserDropdown & JSXBase.HTMLAttributes<HTMLCutWcNavigationUserDropdownElement>;
            "cut-wc-notification": LocalJSX.CutWcNotification & JSXBase.HTMLAttributes<HTMLCutWcNotificationElement>;
            "cut-wc-pill": LocalJSX.CutWcPill & JSXBase.HTMLAttributes<HTMLCutWcPillElement>;
            "cut-wc-popup": LocalJSX.CutWcPopup & JSXBase.HTMLAttributes<HTMLCutWcPopupElement>;
            "cut-wc-product-footer": LocalJSX.CutWcProductFooter & JSXBase.HTMLAttributes<HTMLCutWcProductFooterElement>;
            "cut-wc-progress-bar": LocalJSX.CutWcProgressBar & JSXBase.HTMLAttributes<HTMLCutWcProgressBarElement>;
            "cut-wc-radio": LocalJSX.CutWcRadio & JSXBase.HTMLAttributes<HTMLCutWcRadioElement>;
            "cut-wc-radio-group": LocalJSX.CutWcRadioGroup & JSXBase.HTMLAttributes<HTMLCutWcRadioGroupElement>;
            "cut-wc-rating": LocalJSX.CutWcRating & JSXBase.HTMLAttributes<HTMLCutWcRatingElement>;
            "cut-wc-select": LocalJSX.CutWcSelect & JSXBase.HTMLAttributes<HTMLCutWcSelectElement>;
            "cut-wc-shopping-cart": LocalJSX.CutWcShoppingCart & JSXBase.HTMLAttributes<HTMLCutWcShoppingCartElement>;
            "cut-wc-stepper": LocalJSX.CutWcStepper & JSXBase.HTMLAttributes<HTMLCutWcStepperElement>;
            "cut-wc-tab": LocalJSX.CutWcTab & JSXBase.HTMLAttributes<HTMLCutWcTabElement>;
            "cut-wc-tabs": LocalJSX.CutWcTabs & JSXBase.HTMLAttributes<HTMLCutWcTabsElement>;
            "cut-wc-tag": LocalJSX.CutWcTag & JSXBase.HTMLAttributes<HTMLCutWcTagElement>;
            "cut-wc-text-area": LocalJSX.CutWcTextArea & JSXBase.HTMLAttributes<HTMLCutWcTextAreaElement>;
            "cut-wc-time-picker": LocalJSX.CutWcTimePicker & JSXBase.HTMLAttributes<HTMLCutWcTimePickerElement>;
            "cut-wc-time-picker-clock": LocalJSX.CutWcTimePickerClock & JSXBase.HTMLAttributes<HTMLCutWcTimePickerClockElement>;
            "cut-wc-toggle": LocalJSX.CutWcToggle & JSXBase.HTMLAttributes<HTMLCutWcToggleElement>;
            "cut-wc-tooltip": LocalJSX.CutWcTooltip & JSXBase.HTMLAttributes<HTMLCutWcTooltipElement>;
            "cut-wc-user-dropdown": LocalJSX.CutWcUserDropdown & JSXBase.HTMLAttributes<HTMLCutWcUserDropdownElement>;
            "cut-wc-web-footer": LocalJSX.CutWcWebFooter & JSXBase.HTMLAttributes<HTMLCutWcWebFooterElement>;
            "my-component": LocalJSX.MyComponent & JSXBase.HTMLAttributes<HTMLMyComponentElement>;
            "nav-testing": LocalJSX.NavTesting & JSXBase.HTMLAttributes<HTMLNavTestingElement>;
        }
    }
}
